var documenterSearchIndex = {"docs":
[{"location":"ModeSolvers/#OpticalFibers.ModeSolvers","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers","text":"","category":"section"},{"location":"ModeSolvers/","page":"ModeSolvers-Modes and Fields","title":"ModeSolvers-Modes and Fields","text":"CurrentModule = OpticalFibers.ModeSolvers","category":"page"},{"location":"ModeSolvers/","page":"ModeSolvers-Modes and Fields","title":"ModeSolvers-Modes and Fields","text":"This module contains different mode solvers for optical fibers. They are based on the interface conditions of analytical solutions between the layers of the fiber, finite difference method or finite element method.","category":"page"},{"location":"ModeSolvers/#Fields","page":"ModeSolvers-Modes and Fields","title":"Fields","text":"","category":"section"},{"location":"ModeSolvers/","page":"ModeSolvers-Modes and Fields","title":"ModeSolvers-Modes and Fields","text":"This module defines two types of field: the scalar field (valid in the case of weakly guiding fibers) and the vector field.","category":"page"},{"location":"ModeSolvers/","page":"ModeSolvers-Modes and Fields","title":"ModeSolvers-Modes and Fields","text":"Field\nScalarField\nVectorField","category":"page"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.Field","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.Field","text":"Abstract structure to describe an electromagnetic field\n\nabstract type Field end\n\n\n\n\n\n","category":"type"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.ScalarField","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.ScalarField","text":"Structure describing a 2D scalar field in cartesian coordinates\n\nx :: Vector{Float64} - Horizontal coordinate\ny :: Vector{Float64} - Vertical coordinate\nE :: Matrix{ComplexF64} - Electric field\n\n\n\n\n\n","category":"type"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.VectorField","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.VectorField","text":"Structure describing a 2D vector field in cartesian coordinates\n\nx :: Vector{Float64} - Horizontal coordinate\ny :: Vector{Float64} - Vertical coordinate\nEx :: Matrix{ComplexF64} - x-component of the electric field\nEy :: Matrix{ComplexF64} - y-component of the electric field\nEz :: Matrix{ComplexF64} - z-component of the electric field\nHx :: Matrix{ComplexF64} - x-component of the magnetic field\nHy :: Matrix{ComplexF64} - y-component of the magnetic field\nHz :: Matrix{ComplexF64} - z-component of the magnetic field\n\n\n\n\n\n","category":"type"},{"location":"ModeSolvers/","page":"ModeSolvers-Modes and Fields","title":"ModeSolvers-Modes and Fields","text":"Two fields of the same type can be add or substract if their coordinates x and y are similar. It is also possible to multiply or divide a field by a scalar.","category":"page"},{"location":"ModeSolvers/","page":"ModeSolvers-Modes and Fields","title":"ModeSolvers-Modes and Fields","text":"Two convenient function to interpolate the fields on another grid (changing x and y) are implemented:","category":"page"},{"location":"ModeSolvers/","page":"ModeSolvers-Modes and Fields","title":"ModeSolvers-Modes and Fields","text":"Interpolation(::ScalarField,::Vector{<:Real},::Vector{<:Real})\nInterpolation(::VectorField,::Vector{<:Real},::Vector{<:Real})","category":"page"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.Interpolation-Tuple{OpticalFibers.ModeSolvers.ScalarField, Vector{<:Real}, Vector{<:Real}}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.Interpolation","text":"Interpolation(f::ScalarField,x::Vector{<:Real},y::Vector{<:Real})\n\nReturns a scalar field obtained by the linear interpolation of the field f.  \n\nThis function assumes that the electric field is null outside the box defined by f.x and f.y\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.Interpolation-Tuple{OpticalFibers.ModeSolvers.VectorField, Vector{<:Real}, Vector{<:Real}}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.Interpolation","text":"Interpolation(f::VectorField,x::Vector{<:Real},y::Vector{<:Real})\n\nReturns a vector field obtained by the linear interpolation of the field f.  \n\nThis function assumes that the electric/magnetic field is null outside the box defined by f.x and f.y\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#Modes","page":"ModeSolvers-Modes and Fields","title":"Modes","text":"","category":"section"},{"location":"ModeSolvers/","page":"ModeSolvers-Modes and Fields","title":"ModeSolvers-Modes and Fields","text":"Mode\nScalarMode1D\nScalarMode2D\nVectorMode","category":"page"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.Mode","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.Mode","text":"Abstract structure to describe an optical fiber mode\n\nabstract type Mode end\n\n\n\n\n\n","category":"type"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.ScalarMode1D","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.ScalarMode1D","text":"Structure describing a scalar mode in an optical fiber with a revolution symmetry\n\nName :: String - Name of the mode\nneff :: Float64 - Effective index\nlambda :: Float64 - the wavelength at which the mode was calculated\nnu :: Int64 - Azimuthal number\nr :: Vector{Float64} - Radial coordinate\nE :: Vector{Float64} - Electric field\n\n\n\n\n\n","category":"type"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.ScalarMode2D","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.ScalarMode2D","text":"Structure describing a scalar mode in an optical fiber in cartesian coordinates\n\nName :: String - Name of the mode\nneff :: Float64 - Effective index\nlambda :: Float64 - the wavelength at which the mode was calculated\nx :: Vector{Float64} - Horizontal coordinate\ny :: Vector{Float64} - Vertical coordinate\nE :: Matrix{Float64} - Electric field\n\n\n\n\n\n","category":"type"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.VectorMode","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.VectorMode","text":"Structure describing a vector mode in an optical fiber in cartesian coordinates.  \n\nThis structure assumes that the fiber is made of a non-lossy materials. In this case, the x- and y-components of the electric/magnetic fields can be chosen real and their z-components are then pure imaginary numbers.\n\nName :: String - Name of the mode\nneff :: Float64 - Effective index\nlambda :: Float64 - the wavelength at which the mode was calculated\nx :: Vector{Float64} - Horizontal coordinate\ny :: Vector{Float64} - Vertical coordinate\nEx :: Matrix{Float64} - Real part of the x-component of the electric field\nEy :: Matrix{Float64} - Real part of the y-component of the electric field\nEz :: Matrix{Float64} - Imaginary part of the z-component of the electric field\nHx :: Matrix{Float64} - Real part of the x-component of the magnetic field\nHy :: Matrix{Float64} - Real part of the y-component of the magnetic field\nHz :: Matrix{Float64} - Imaginary part of the z-component of the magnetic field\n\n\n\n\n\n","category":"type"},{"location":"ModeSolvers/","page":"ModeSolvers-Modes and Fields","title":"ModeSolvers-Modes and Fields","text":"A ScalarMode1D can be convert into a ScalarMode2D or a VectorMode:","category":"page"},{"location":"ModeSolvers/","page":"ModeSolvers-Modes and Fields","title":"ModeSolvers-Modes and Fields","text":"ScalarMode2D(::ScalarMode1D;::char)\nVectorMode(::ScalarMode1D;::Char,::Char)","category":"page"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.ScalarMode2D-Tuple{OpticalFibers.ModeSolvers.ScalarMode1D}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.ScalarMode2D","text":"ScalarMode2D(m::ScalarMode1D;sincos::Char='c')\n\nConvert a ScalarMode1D into a ScalarMode2D\n\nsincos must be 'c' for a field in cos(nu.θ) or 's' for a field in sin(nu.θ) if m.nu≠0\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.VectorMode-Tuple{OpticalFibers.ModeSolvers.ScalarMode1D}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.VectorMode","text":"VectorMode(m::ScalarMode1D;polar::Char='x',sincos::Char='c')\n\nConvert a ScalarMode1D into a x- or y-polarized VectorMode\n\npolar must be 'x' or 'y'\nsincos must be 'c' for a field in cos(nu.θ) or 's' for a field in sin(nu.θ) if m.nu≠0\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/","page":"ModeSolvers-Modes and Fields","title":"ModeSolvers-Modes and Fields","text":"A ScalarMode2D can be convert into a VectorMode:","category":"page"},{"location":"ModeSolvers/","page":"ModeSolvers-Modes and Fields","title":"ModeSolvers-Modes and Fields","text":"VectorMode(::ScalarMode2D;::Char)","category":"page"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.VectorMode-Tuple{OpticalFibers.ModeSolvers.ScalarMode2D}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.VectorMode","text":"VectorMode(m::ScalarMode2D;polar::Char='x')\n\nConvert a ScalarMode2D into a x- or y-polarized VectorMode\n\npolar must be 'x' or 'y'\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#Propagation-of-modes","page":"ModeSolvers-Modes and Fields","title":"Propagation of modes","text":"","category":"section"},{"location":"ModeSolvers/","page":"ModeSolvers-Modes and Fields","title":"ModeSolvers-Modes and Fields","text":"The field due to the propagation of a mode after a propagation distance z can be compute be using these functions:","category":"page"},{"location":"ModeSolvers/","page":"ModeSolvers-Modes and Fields","title":"ModeSolvers-Modes and Fields","text":"ScalarField(::ScalarMode1D;::Char,::Real)\nScalarField(::ScalarMode2D;::Real)\nVectorField(::VectorMode;::Real)\nVectorField(::ScalarMode2D;::Char,::Real)\nVectorField(::ScalarMode1D;::Char,::Char,::Real)","category":"page"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.ScalarField-Tuple{OpticalFibers.ModeSolvers.ScalarMode1D}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.ScalarField","text":"ScalarField(m::ScalarMode1D;sincos::Char='c',z::Real=0)\n\nReturns the scalar field due to the mode m after a propagation distance z \n\nsincos must be 'c' for a field in cos(nu.θ) or 's' for a field in sin(nu.θ) if m.nu≠0\nz: Propagation distance - Must be in the same unit as m.lambda\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.ScalarField-Tuple{OpticalFibers.ModeSolvers.ScalarMode2D}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.ScalarField","text":"ScalarField(m::ScalarMode2D;z::Real=0)\n\nReturns the scalar field due to the mode m after a propagation distance z \n\nz: Propagation distance - Must be in the same unit as m.lambda\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.VectorField-Tuple{OpticalFibers.ModeSolvers.VectorMode}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.VectorField","text":"VectorField(m::VectorMode;z::Real=0)\n\nReturns the vector field due to the mode m after a propagation distance z \n\nz: Propagation distance - Must be in the same unit as m.lambda\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.VectorField-Tuple{OpticalFibers.ModeSolvers.ScalarMode2D}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.VectorField","text":"VectorField(m::ScalarMode2D;polar::Char='x',z::Real=0)\n\nReturns the vector field due to the mode m after a propagation distance z \n\npolar must be 'x' or 'y'\nz: Propagation distance - Must be in the same unit as m.lambda\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.VectorField-Tuple{OpticalFibers.ModeSolvers.ScalarMode1D}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.VectorField","text":"VectorField(m::ScalarMode1D;polar::Char='x',sincos::Char='c',z::Real=0)\n\nReturns the vector field due to the mode m after a propagation distance z \n\npolar must be 'x' or 'y'\nsincos must be 'c' for a field in cos(nu.θ) or 's' for a field in sin(nu.θ) if m.nu≠0\nz: Propagation distance - Must be in the same unit as m.lambda\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#Poynting-vector","page":"ModeSolvers-Modes and Fields","title":"Poynting vector","text":"","category":"section"},{"location":"ModeSolvers/","page":"ModeSolvers-Modes and Fields","title":"ModeSolvers-Modes and Fields","text":"Convenient functions are impleted to compute the poynting vector of modes or fields:","category":"page"},{"location":"ModeSolvers/","page":"ModeSolvers-Modes and Fields","title":"ModeSolvers-Modes and Fields","text":"PoyntingVector(::VectorField)\nPoyntingVector(::VectorMode)\nPoyntingVector(::ScalarMode2D)\nPoyntingVector(::ScalarMode1D;::Char)","category":"page"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.PoyntingVector-Tuple{OpticalFibers.ModeSolvers.VectorField}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.PoyntingVector","text":"PoyntingVector(f::VectorField)\n\nReturn a tuple of 3 matrix that describes the Poynting Vector (Px,Py,Pz)\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.PoyntingVector-Tuple{OpticalFibers.ModeSolvers.VectorMode}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.PoyntingVector","text":"PoyntingVector(m::VectorMode)\n\nReturn a tuple of 3 matrix that describes the Poynting Vector (Px,Py,Pz)\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.PoyntingVector-Tuple{OpticalFibers.ModeSolvers.ScalarMode2D}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.PoyntingVector","text":"PoyntingVector(m::ScalarMode2D)\n\nReturn a tuple of 3 matrix that describes the Poynting Vector (Px,Py,Pz)\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.PoyntingVector-Tuple{OpticalFibers.ModeSolvers.ScalarMode1D}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.PoyntingVector","text":"PoyntingVector(m::ScalarMode1D;sincos::Char='c')\n\nReturn a tuple of 3 matrix that describes the Poynting Vector (Px,Py,Pz)\n\nsincos must be 'c' for a field in cos(nu.θ) or 's' for a field in sin(nu.θ) if m.nu≠0\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#Mode-normalization","page":"ModeSolvers-Modes and Fields","title":"Mode normalization","text":"","category":"section"},{"location":"ModeSolvers/","page":"ModeSolvers-Modes and Fields","title":"ModeSolvers-Modes and Fields","text":"The modes given by the mode solvers of this package are not normalized. You can normalize them by using the function normalize!. The vector modes are normalized so as vert iint frac12left(vecEwedgevecH^*right) dS vert=1 and the scalar mode are normalized like vector modes if the optional parameter unitIntegral is false or so as $ \\iint \\vert E \\vert^2 dS=1 $ if unitIntegral is true.","category":"page"},{"location":"ModeSolvers/","page":"ModeSolvers-Modes and Fields","title":"ModeSolvers-Modes and Fields","text":"normalize!(::ScalarMode1D;::Bool)\nnormalize!(::ScalarMode2D;::Bool)\nnormalize!(::VectorMode)","category":"page"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.normalize!-Tuple{OpticalFibers.ModeSolvers.ScalarMode1D}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.normalize!","text":"normalize!(m::ScalarMode1D;unitIntegral::Bool=true)\n\nNormalize the mode m with the method given by the boolean parameter unitIntegral.\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.normalize!-Tuple{OpticalFibers.ModeSolvers.ScalarMode2D}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.normalize!","text":"normalize!(m::ScalarMode2D;unitIntegral::Bool=true)\n\nNormalize the mode m with the method given by the boolean parameter unitIntegral.\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.normalize!-Tuple{OpticalFibers.ModeSolvers.VectorMode}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.normalize!","text":"normalize!(m::VectorMode)\n\nNormalize the mode m.\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#Overlap-integral","page":"ModeSolvers-Modes and Fields","title":"Overlap integral","text":"","category":"section"},{"location":"ModeSolvers/","page":"ModeSolvers-Modes and Fields","title":"ModeSolvers-Modes and Fields","text":"The overlap integral between two fields f_1 and f_2 is langle f_1 vert f_2 rangle = iint E_1 E_2^* dS for scalar fields and langle f_1 vert f_2 rangle = iint frac12left(vecE_1 wedge vecH_2^*right)_z dS for vector fields.  ","category":"page"},{"location":"ModeSolvers/","page":"ModeSolvers-Modes and Fields","title":"ModeSolvers-Modes and Fields","text":"It is also possible to compute overlap integrals between two modes or between a mode and a field. However, when modes are involved, they are normalized before the calculation.","category":"page"},{"location":"ModeSolvers/","page":"ModeSolvers-Modes and Fields","title":"ModeSolvers-Modes and Fields","text":"overlap(::ScalarField,::ScalarField)\noverlap(::VectorField,::VectorField)\noverlap(::ScalarMode1D,::ScalarMode1D)\noverlap(::ScalarMode2D,::ScalarMode2D)\noverlap(::VectorMode,::VectorMode)\noverlap(::ScalarField,::ScalarMode2D)\noverlap(::ScalarMode2D,::ScalarField)\noverlap(::VectorField,::VectorMode)\noverlap(::VectorMode,::VectorField)","category":"page"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.overlap-Tuple{OpticalFibers.ModeSolvers.ScalarField, OpticalFibers.ModeSolvers.ScalarField}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.overlap","text":"overlap(f1::ScalarField,f2::ScalarField)\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.overlap-Tuple{OpticalFibers.ModeSolvers.VectorField, OpticalFibers.ModeSolvers.VectorField}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.overlap","text":"overlap(f1::VectorField,f2::VectorField)\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.overlap-Tuple{OpticalFibers.ModeSolvers.ScalarMode1D, OpticalFibers.ModeSolvers.ScalarMode1D}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.overlap","text":"overlap(m1::ScalarMode1D,m2::ScalarMode1D)\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.overlap-Tuple{OpticalFibers.ModeSolvers.ScalarMode2D, OpticalFibers.ModeSolvers.ScalarMode2D}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.overlap","text":"overlap(m1::ScalarMode2D,m2::ScalarMode2D)\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.overlap-Tuple{OpticalFibers.ModeSolvers.VectorMode, OpticalFibers.ModeSolvers.VectorMode}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.overlap","text":"overlap(m1::VectorMode,m2::VectorMode)\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.overlap-Tuple{OpticalFibers.ModeSolvers.ScalarField, OpticalFibers.ModeSolvers.ScalarMode2D}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.overlap","text":"overlap(f1::ScalarField,m2::ScalarMode2D)\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.overlap-Tuple{OpticalFibers.ModeSolvers.ScalarMode2D, OpticalFibers.ModeSolvers.ScalarField}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.overlap","text":"overlap(m1::ScalarMode2D,f2::ScalarField)\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.overlap-Tuple{OpticalFibers.ModeSolvers.VectorField, OpticalFibers.ModeSolvers.VectorMode}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.overlap","text":"overlap(f1::VectorField,m2::VectorMode)\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.overlap-Tuple{OpticalFibers.ModeSolvers.VectorMode, OpticalFibers.ModeSolvers.VectorField}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.overlap","text":"overlap(m1::VectorMode,f2::VectorField)\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#Effective-area","page":"ModeSolvers-Modes and Fields","title":"Effective area","text":"","category":"section"},{"location":"ModeSolvers/","page":"ModeSolvers-Modes and Fields","title":"ModeSolvers-Modes and Fields","text":"The effective area is defined by:","category":"page"},{"location":"ModeSolvers/","page":"ModeSolvers-Modes and Fields","title":"ModeSolvers-Modes and Fields","text":"for scalar modes: fracleft( iint vert E vert^2 dS right)^2iint vert E vert^4 dS\nfor vector modes, there are two different values [7] : fracmu_0varepsilon_0fracleft(Releft(iint(vecEwedgevecH^*)_z dSright)right)^2iint n_0^2 vert vecEvecE^* vert^2 dS and fracmu_0varepsilon_0fracleft(Releft(iint(vecEwedgevecH^*)_z dSright)right)^2iint n_0^2 left(vecEvecEright)left(vecE^*vecE^*right) dS where n_0 is the refractive index involved in the relation between the nonlinear index n_2 and the third order susceptibility chi^(3).","category":"page"},{"location":"ModeSolvers/","page":"ModeSolvers-Modes and Fields","title":"ModeSolvers-Modes and Fields","text":"    Aeff(::ScalarMode1D)\n    Aeff(::ScalarMode2D)\n    Aeff(::VectorMode)\n    Aeff(::VectorMode,::Real)\n    Aeff(::VectorMode,::Function)","category":"page"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.Aeff-Tuple{OpticalFibers.ModeSolvers.ScalarMode1D}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.Aeff","text":"Aeff(m::ScalarMode1D)\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.Aeff-Tuple{OpticalFibers.ModeSolvers.ScalarMode2D}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.Aeff","text":"Aeff(m::ScalarMode2D)\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.Aeff-Tuple{OpticalFibers.ModeSolvers.VectorMode}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.Aeff","text":"Aeff(m::VectorMode)\n\nCompute effective areas by assuming that n0≃neff (true in a weakly-guiding fiber)\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.Aeff-Tuple{OpticalFibers.ModeSolvers.VectorMode, Real}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.Aeff","text":"Aeff(m::VectorMode)\n\nCompute effective areas by assuming that n0 is uniform\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.Aeff-Tuple{OpticalFibers.ModeSolvers.VectorMode, Function}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.Aeff","text":"Aeff(m::VectorMode)\n\nn0 must be a function of the cartesian coordinates x and y\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#Non-linear-coefficient","page":"ModeSolvers-Modes and Fields","title":"Non-linear coefficient","text":"","category":"section"},{"location":"ModeSolvers/","page":"ModeSolvers-Modes and Fields","title":"ModeSolvers-Modes and Fields","text":"If all your lentghs are in microns and n_2 is in SI (m²/W), you have to multiply the result by 10^18 to obtain the result in W^-1.m^-1","category":"page"},{"location":"ModeSolvers/","page":"ModeSolvers-Modes and Fields","title":"ModeSolvers-Modes and Fields","text":"    nonLinearCoefficient(::Mode,::Real)\n    nonLinearCoefficient(::VectorMode,::Real,::Real)\n    nonLinearCoefficient(::ScalarMode1D,::Function)\n    nonLinearCoefficient(::ScalarMode2D,::Function)\n    nonLinearCoefficient(::VectorMode,::Function,::Function)","category":"page"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.nonLinearCoefficient-Tuple{OpticalFibers.ModeSolvers.Mode, Real}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.nonLinearCoefficient","text":"nonLinearCoefficient(m::Mode,n2::Real)\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.nonLinearCoefficient-Tuple{OpticalFibers.ModeSolvers.VectorMode, Real, Real}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.nonLinearCoefficient","text":"nonLinearCoefficient(m::VectorMode,n0::Real,n2::Real)\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.nonLinearCoefficient-Tuple{OpticalFibers.ModeSolvers.ScalarMode1D, Function}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.nonLinearCoefficient","text":"nonLinearCoefficient(m::ScalarMode1D,n2::Function)\n\nn2 must be a function of the radial coordinate r\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.nonLinearCoefficient-Tuple{OpticalFibers.ModeSolvers.ScalarMode2D, Function}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.nonLinearCoefficient","text":"nonLinearCoefficient(m::ScalarMode2D,n2::Function)\n\nn2 must be a function of the cartesian coordinates x and y\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.nonLinearCoefficient-Tuple{OpticalFibers.ModeSolvers.VectorMode, Function, Function}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.nonLinearCoefficient","text":"nonLinearCoefficient(m::VectorMode,n0::Function,n2::Function)\n\nn0 and n2 must be functions of the cartesian coordinates x and y\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#Mode-Field-Diameter-(MFD)","page":"ModeSolvers-Modes and Fields","title":"Mode Field Diameter (MFD)","text":"","category":"section"},{"location":"ModeSolvers/","page":"ModeSolvers-Modes and Fields","title":"ModeSolvers-Modes and Fields","text":"The computation MFD is only valid for Gaussian-like beam (maximum at the center of the fiber and electric field with a constant sign). The MFD is calculated by finding the positions where E=fracmaxEexp(1) for scalar modes and P_z=fracmaxP_zexp(2) for vector modes.","category":"page"},{"location":"ModeSolvers/","page":"ModeSolvers-Modes and Fields","title":"ModeSolvers-Modes and Fields","text":"    MFD(::ScalarMode1D)\n    MFD(::ScalarMode2D;::Real)\n    MFD(::VectorMode;::Real)","category":"page"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.MFD-Tuple{OpticalFibers.ModeSolvers.ScalarMode1D}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.MFD","text":"MFD(m::ScalarMode1D)\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.MFD-Tuple{OpticalFibers.ModeSolvers.ScalarMode2D}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.MFD","text":"MFD(m::ScalarMode2D;angle::Real=0)\n\nCompute the MFD in the direction given by the angle (angle with the x-axis)\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers/#OpticalFibers.ModeSolvers.MFD-Tuple{OpticalFibers.ModeSolvers.VectorMode}","page":"ModeSolvers-Modes and Fields","title":"OpticalFibers.ModeSolvers.MFD","text":"MFD(m::VectorMode;angle::Real=0)\n\nCompute the MFD in the direction given by the angle (angle with the x-axis)\n\n\n\n\n\n","category":"method"},{"location":"PhysicalData/#OpticalFibers","page":"PhysicalData","title":"OpticalFibers","text":"","category":"section"},{"location":"PhysicalData/","page":"PhysicalData","title":"PhysicalData","text":"CurrentModule = OpticalFibers.PhysicalData","category":"page"},{"location":"PhysicalData/#Constants","page":"PhysicalData","title":"Constants","text":"","category":"section"},{"location":"PhysicalData/","page":"PhysicalData","title":"PhysicalData","text":"Modules = [PhysicalData,]\nOrder = [:constant]","category":"page"},{"location":"PhysicalData/#OpticalFibers.PhysicalData.Z0","page":"PhysicalData","title":"OpticalFibers.PhysicalData.Z0","text":"Z0=sqrt(mu0/eps0)\n\nVaccum impedance (Ω)\n\n\n\n\n\n","category":"constant"},{"location":"PhysicalData/#OpticalFibers.PhysicalData.c","page":"PhysicalData","title":"OpticalFibers.PhysicalData.c","text":"c=299792458.0\n\nVelocity of light in vacuum (m/s)\n\n\n\n\n\n","category":"constant"},{"location":"PhysicalData/#OpticalFibers.PhysicalData.eps0","page":"PhysicalData","title":"OpticalFibers.PhysicalData.eps0","text":"eps0=1/(mu0*c^2)\n\nVaccum permittivity (F/m)\n\n\n\n\n\n","category":"constant"},{"location":"PhysicalData/#OpticalFibers.PhysicalData.h","page":"PhysicalData","title":"OpticalFibers.PhysicalData.h","text":"h=6.62607015e-34\n\nPlanck constant (J.s)\n\n\n\n\n\n","category":"constant"},{"location":"PhysicalData/#OpticalFibers.PhysicalData.mu0","page":"PhysicalData","title":"OpticalFibers.PhysicalData.mu0","text":"mu0=1.25663706212e-6\n\nVaccum permeability (H/m)\n\n\n\n\n\n","category":"constant"},{"location":"PhysicalData/#Functions","page":"PhysicalData","title":"Functions","text":"","category":"section"},{"location":"PhysicalData/","page":"PhysicalData","title":"PhysicalData","text":"Modules = [PhysicalData,]\nOrder = [:function]","category":"page"},{"location":"PhysicalData/#OpticalFibers.PhysicalData.Sa_Ytterbium-Tuple{Real}","page":"PhysicalData","title":"OpticalFibers.PhysicalData.Sa_Ytterbium","text":"Sa_Ytterbium(lambda::Real)\n\nReturns the absorption cross section (in m²) of ytterbium [1]  \n\nlambda: Wavelength (m)\n\n\n\n\n\n","category":"method"},{"location":"PhysicalData/#OpticalFibers.PhysicalData.Se_Ytterbium-Tuple{Real}","page":"PhysicalData","title":"OpticalFibers.PhysicalData.Se_Ytterbium","text":"Se_Ytterbium(lambda::Real)\n\nReturns the emission cross section (in m²) of ytterbium [1]  \n\nlambda: Wavelength (m)\n\n\n\n\n\n","category":"method"},{"location":"PhysicalData/#OpticalFibers.PhysicalData.n_F_Doped_Silica-Tuple{Real, Real}","page":"PhysicalData","title":"OpticalFibers.PhysicalData.n_F_Doped_Silica","text":"n_F_Doped_Silica(lambda::Real,xF::Real)\n\nReturns the refractive index of Fluorine-doped Silica [2]  \n\nlambda: Wavelength (m) - Domain of validity: 600 nm ≤ lambda ≤ 1800 nm\nxF: Fluorine Fraction (0 ≤ x Ge ≤ 1) - Domain of validity: xF ≤ 0.02\n\n\n\n\n\n","category":"method"},{"location":"PhysicalData/#OpticalFibers.PhysicalData.n_Ge_Doped_Silica-Tuple{Real, Real}","page":"PhysicalData","title":"OpticalFibers.PhysicalData.n_Ge_Doped_Silica","text":"n_Ge_Doped_Silica_Fleming(lambda::Real,xGe::Real;author::Symbol=:Fleming)\n\nIf author==:Fleming, returns the refractive index of Germanium-doped Silica [3]  \n\nlambda: Wavelength (m) - Domain of validity: 360 nm ≤ lambda ≤ 4300 nm\nxGe: Germanium Fraction (0 ≤ xGe ≤ 1)  \n\nIf author==:Sunak, returns the refractive index of Germanium-doped Silica [2]  \n\nlambda: Wavelength (m) - Domain of validity: 600 nm ≤ lambda ≤ 1800 nm\nxGe: Germanium Fraction (0 ≤ x Ge ≤ 1) - Domain of validity: xGe ≤ 0.2\n\n\n\n\n\n","category":"method"},{"location":"PhysicalData/#OpticalFibers.PhysicalData.n_Germanium-Tuple{Real, Real}","page":"PhysicalData","title":"OpticalFibers.PhysicalData.n_Germanium","text":"n_Germanium(lambda::Real,T::Real)\n\nReturns the refractive index of Germanium [4]  \n\nlambda: Wavelength (m) - Domain of validity: 1900 nm ≤ lambda ≤ 5500 nm\nT: Temperature (K) - Domain of validity: 20 K ≤ T ≤ 300 K\n\n\n\n\n\n","category":"method"},{"location":"PhysicalData/#OpticalFibers.PhysicalData.n_Silicon-Tuple{Real, Real}","page":"PhysicalData","title":"OpticalFibers.PhysicalData.n_Silicon","text":"n_Silicon(lambda::Real,T::Real)\n\nReturns the refractive index of Silicon [4]  \n\nlambda: Wavelength (m) - Domain of validity: 1100 nm ≤ lambda ≤ 5600 nm\nT: Temperature (K) - Domain of validity: 20 K ≤ T ≤ 300 K\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers-Solvers/#OpticalFibers.ModeSolvers-Solvers","page":"ModeSolvers-Solvers","title":"OpticalFibers.ModeSolvers - Solvers","text":"","category":"section"},{"location":"ModeSolvers-Solvers/","page":"ModeSolvers-Solvers","title":"ModeSolvers-Solvers","text":"CurrentModule = OpticalFibers.ModeSolvers","category":"page"},{"location":"ModeSolvers-Solvers/#Quasi-analytical-multi-step-index-fibers-solver","page":"ModeSolvers-Solvers","title":"Quasi-analytical multi-step index fibers solver","text":"","category":"section"},{"location":"ModeSolvers-Solvers/","page":"ModeSolvers-Solvers","title":"ModeSolvers-Solvers","text":"This solver assumes that the fiber consists of several concentric layers of uniform refractive index. The cladding is assumed to be infinite. In each layer, the analytical solutions are the Bessel functions. The solver uses the interface conditions to predict the effective index and the profile of the modes. This method is described in the book written by J. Bures [5].  ","category":"page"},{"location":"ModeSolvers-Solvers/","page":"ModeSolvers-Solvers","title":"ModeSolvers-Solvers","text":"This solver only returns guided modes: the effective index of the mode is real and cannot be lower than the refractive index of the external cladding. ","category":"page"},{"location":"ModeSolvers-Solvers/","page":"ModeSolvers-Solvers","title":"ModeSolvers-Solvers","text":"    multi_step_fiber_modes","category":"page"},{"location":"ModeSolvers-Solvers/#OpticalFibers.ModeSolvers.multi_step_fiber_modes","page":"ModeSolvers-Solvers","title":"OpticalFibers.ModeSolvers.multi_step_fiber_modes","text":"multi_step_fiber_modes(lambda::Real,nu::Integer,radius::Union{Vector{<:Real},Real},index::Vector{<:Real};maxPosition::Real=0,numberofPoints::Integer=100,precision::Float64=1E-12,type::Symbol=:Scalar,firstDivision::Integer=0)\n\nReturns a vector of ScalarMode1D if type=:Scalar or a vector of VectorMode if type=:Vector. If maxPosition=0, the modes do not include the electromagnetic field.\n\nlambda: wavelength\nnu: azimuthal number\nradius: outer radius of each layer (the cladding is inifinite and has no radius)\nindex: refractive index of each layer (the cladding is included so that length(index) must be equal to length(radius)+1)\nmaxPosition: maximum value of the radial coordinate r for scalar modes or cartesian coordinates x/y for vector modes. If maxPosition=0, the field is not computed.\nnumberofPoints: number of points between 0 and maxPosition\nprecision: precision required on the effective index \ntype: must be :Scalar or :Vector\nfirstDivision: in the case of a very multimode fiber, you can increase this number if some modes are missing. If firstDivision=0, the value of firstDivision is approximated by the solver.\n\n\n\n\n\n","category":"function"},{"location":"ModeSolvers-Solvers/#Finite-difference-mode-solvers","page":"ModeSolvers-Solvers","title":"Finite difference mode solvers","text":"","category":"section"},{"location":"ModeSolvers-Solvers/","page":"ModeSolvers-Solvers","title":"ModeSolvers-Solvers","text":"In this package, the FD solvers only return guided modes. The method used in the vectorial case is described in the paper of Zhu [6].","category":"page"},{"location":"ModeSolvers-Solvers/","page":"ModeSolvers-Solvers","title":"ModeSolvers-Solvers","text":"The computation of the effective index amounts to an eigenvalue problem. Three solutions are available to solve this eigenvalue problem: the use of the package Arpack.jl and the use of the package ArnoldiMethod.jl combined with LinearAlgebra.jl (LU decomposition) or MUMPS.jl.","category":"page"},{"location":"ModeSolvers-Solvers/","page":"ModeSolvers-Solvers","title":"ModeSolvers-Solvers","text":"    FD(::Real,::Integer,::Integer,::Function,::Integer,::Real;::Bool,::Integer,::Symbol,::Float64)\n    FD(::Real,::Integer,::Function,::Integer,::Integer,::Real,::Real;::Bool,::Integer,::Symbol,::Symbol,::Float64)","category":"page"},{"location":"ModeSolvers-Solvers/#OpticalFibers.ModeSolvers.FD-Tuple{Real, Integer, Integer, Function, Integer, Real}","page":"ModeSolvers-Solvers","title":"OpticalFibers.ModeSolvers.FD","text":"FD(lambda::Real,l::Integer,mmax::Integer,fonc::Function,nb::Integer,rmax::Real;field::Bool=false,order::Integer=1,solver::Symbol=:Arpack,tol::Float64=0.0)\n\nReturns a vector of ScalarMode1D in the case of a cylindrically-symmetric weakly-guiding fiber.  \n\nlambda: wavelength\nl: azimuthal number\nmmax: maximal number of modes (useful if the fiber is very multimode)\nfonc: function of the radial coordinate r that describes the refractive index profile\nnb: number of nodes for the finite difference method\nrmax: maximal value of r\nfield: boolean that indicates if fields must be saved\norder: order of the method to average the refractive index profile for each node (no averaging if order=1)\nsolver: can be :Arpack, :LU or :MUMPS\ntol: tolerance for the eigenvalue solver (see documention of Arpack.jl or ArnoldiMethod.jl)\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers-Solvers/#OpticalFibers.ModeSolvers.FD-Tuple{Real, Integer, Function, Integer, Integer, Real, Real}","page":"ModeSolvers-Solvers","title":"OpticalFibers.ModeSolvers.FD","text":"FD(lambda::Real,mmax::Integer,fonc::Function,nbx::Integer,nby::Integer,xmax::Real,ymax::Real;field::Bool=false,order::Integer=1,type::Symbol=:Scalar,solver::Symbol=:Arpack,tol::Float64=0.0)\n\nReturns a vector of ScalarMode2D if type=:Scalar or a vector of VectorMode if type=:Vector.  \n\nlambda: wavelength\nmmax: maximal number of modes (useful if the fiber is very multimode)\nfonc: function of the cartesian coordinates x/y that describes the refractive index profile\nnbx: number of nodes for the finite difference method in the direction x\nnby: number of nodes for the finite difference method in the direction y\nxmax: maximal value of x\nymax: maximal value of x\nfield: boolean that indicates if fields must be saved\norder: order of the method to average the refractive index profile for each node (no averaging if order=1)\ntype: must be :Scalar or :Vector\nsolver: can be :Arpack, :LU or :MUMPS\ntol: tolerance for the eigenvalue solver (see documention of Arpack.jl or ArnoldiMethod.jl)\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers-Solvers/#Finite-element-mode-solvers","page":"ModeSolvers-Solvers","title":"Finite element mode solvers","text":"","category":"section"},{"location":"ModeSolvers-Solvers/","page":"ModeSolvers-Solvers","title":"ModeSolvers-Solvers","text":"The FEM solvers are based on Gridap.jl and can compute modes of isotropic and anisotropic fibers (useful when using a PML).","category":"page"},{"location":"ModeSolvers-Solvers/","page":"ModeSolvers-Solvers","title":"ModeSolvers-Solvers","text":"The computation of the effective index amounts to an eigenvalue problem. Two solutions are available to solve this eigenvalue problem: the use of the package ArnoldiMethod.jl combined with LinearAlgebra.jl (LU decomposition) or with MUMPS.jl.","category":"page"},{"location":"ModeSolvers-Solvers/","page":"ModeSolvers-Solvers","title":"ModeSolvers-Solvers","text":"In the case of anisotropic fibers, the dimension of the matrix is twice as large as in the case of isotropic fibers.","category":"page"},{"location":"ModeSolvers-Solvers/","page":"ModeSolvers-Solvers","title":"ModeSolvers-Solvers","text":"    FEM(::Real,::Int64,::Function,::DiscreteModel,::Real;::Int64,::Bool,::Symbol,::Symbol,::Float64)\n    FEM(::Real,::Int64,::tensor3,::tensor3,::DiscreteModel,::Real;::Int64,::Bool,::Symbol,::Float64)","category":"page"},{"location":"ModeSolvers-Solvers/#OpticalFibers.ModeSolvers.FEM-Tuple{Real, Int64, Function, Gridap.Geometry.DiscreteModel, Real}","page":"ModeSolvers-Solvers","title":"OpticalFibers.ModeSolvers.FEM","text":"FEM(lambda::Real,mmax::Int64,eps::Function,model::DiscreteModel,approx_neff::Real;order::Int64=2,field::Bool=false,type::Symbol=:Scalar,solver::Symbol=:LU,tol::Float64=0.0)\n\nReturns a vector of ScalarModeFEM if type=:Scalar or a vector of VectorModeFEM if type=:Vector.   The fiber is isotropic and described with its relative permittivity epsilon(pos) where pos is the tuple (x,y).\n\nlambda: wavelength\nmmax: maximal number of modes (useful if the fiber is very multimode)\neps: function of the tuple (x,y) that describes the relative permittivity profile\nmodel: DiscreteModel generated with GridapGmsh.jl\napprox_neff: effective index around which the modes will be computed\norder: order of the FEM\nfield: boolean that indicates if fields must be saved\ntype: must be :Scalar or :Vector\nsolver: can be :LU or :MUMPS\ntol: tolerance for the eigenvalue solver (see documention of ArnoldiMethod.jl)\n\n\n\n\n\n","category":"method"},{"location":"ModeSolvers-Solvers/#OpticalFibers.ModeSolvers.FEM-Tuple{Real, Int64, OpticalFibers.tensor3, OpticalFibers.tensor3, Gridap.Geometry.DiscreteModel, Real}","page":"ModeSolvers-Solvers","title":"OpticalFibers.ModeSolvers.FEM","text":"FEM(lambda::Real,mmax::Int64,eps::tensor3,mu::tensor3,model::DiscreteModel,approx_neff::Real;order::Int64=1,field::Bool=false,solver::Symbol=:LU,tol::Float64=0.0)\n\nReturns a vector of VectorModeFEM. The fiber is anisotropic and described with its relative permittivity tensor and its relative permeability tensor.\n\nlambda: wavelength\nmmax: maximal number of modes (useful if the fiber is very multimode)\neps: functions of the tuple (x,y) that describes the relative permittivity tensor profile\nmu: functions of the tuple (x,y) that describes the relative permeability tensor profile\nmodel: DiscreteModel generated with GridapGmsh.jl\napprox_neff: effective index around which the modes will be computed\norder: order of the FEM\nfield: boolean that indicates if fields must be saved\nsolver: can be :LU or :MUMPS\ntol: tolerance for the eigenvalue solver (see documention of ArnoldiMethod.jl)\n\n\n\n\n\n","category":"method"},{"location":"Bibliography/#References","page":"Bibliography","title":"References","text":"","category":"section"},{"location":"Bibliography/","page":"Bibliography","title":"Bibliography","text":"<div class=\"citation canonical\"><dl><dt>[1]</dt>\n<dd>\n<div id=\"Marciante2006\">J. R. Marciante and J. D. Zuegel. <a href='https://opg.optica.org/ao/abstract.cfm?URI=ao-45-26-6798'><i>High-gain, polarization-preserving, Yb-doped fiber amplifier for low-duty-cycle pulse amplification</i></a>. <a href='https://doi.org/10.1364/AO.45.006798'>Appl. Opt. <b>45</b>, 6798–6804 (2006)</a>.</div>\n</dd><dt>[2]</dt>\n<dd>\n<div id=\"Sunak1989\">H. Sunak and S. Bastien. <i>Refractive index and material dispersion interpolation of doped silica in the 0.6-1.8 µm wavelength region</i>. <a href='https://doi.org/10.1109/68.36016'>IEEE Photonics Technology Letters <b>1</b>, 142-145 (1989)</a>.</div>\n</dd><dt>[3]</dt>\n<dd>\n<div id=\"Fleming1984\">J. W. Fleming. <a href='https://opg.optica.org/ao/abstract.cfm?URI=ao-23-24-4486'><i>Dispersion in GeO2–SiO2 glasses</i></a>. <a href='https://doi.org/10.1364/AO.23.004486'>Appl. Opt. <b>23</b>, 4486–4493 (1984)</a>.</div>\n</dd><dt>[4]</dt>\n<dd>\n<div id=\"Frey2006\">B. J. Frey, D. B. Leviton and T. J. Madison. <a href='https://doi.org/10.1117/12.672850'><i>Temperature-dependent refractive index of silicon and germanium</i></a>. <a href='https://doi.org/10.1117/12.672850'> In: Optomechanical Technologies for Astronomy, 62732J, SPIE (2006)</a>.</div>\n</dd><dt>[5]</dt>\n<dd>\n<div id=\"Bures2009\">J. Bures. <i>Optique guidée. Fibres optiques et composants passifs tout-fibre</i>. Presses internaltionales Polytechnique (2009).</div>\n</dd><dt>[6]</dt>\n<dd>\n<div id=\"Zhu2002\">Z. Zhu and T. G. Brown. <a href='https://opg.optica.org/oe/abstract.cfm?URI=oe-10-17-853'><i>Full-vectorial finite-difference analysis of microstructured optical fibers</i></a>. <a href='https://doi.org/10.1364/OE.10.000853'>Opt. Express <b>10</b>, 853–864 (2002)</a>.</div>\n</dd><dt>[7]</dt>\n<dd>\n<div id=\"Laegsgaard2012\">J. Lægsgaard. <a href='https://opg.optica.org/josab/abstract.cfm?URI=josab-29-11-3183'><i>Modeling of nonlinear propagation in fiber tapers</i></a>. <a href='https://doi.org/10.1364/JOSAB.29.003183'>J. Opt. Soc. Am. B <b>29</b>, 3183–3191 (2012)</a>.</div>\n</dd>\n</dl></div>","category":"page"},{"location":"ModeSolvers-Tutorial/#OpticalFibers.ModeSolvers-Tutorial","page":"ModeSolvers-Tutorial","title":"OpticalFibers.ModeSolvers - Tutorial","text":"","category":"section"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"CurrentModule = OpticalFibers.ModeSolvers","category":"page"},{"location":"ModeSolvers-Tutorial/#Bimodal-Step-index-Fiber","page":"ModeSolvers-Tutorial","title":"Bimodal Step-index Fiber","text":"","category":"section"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"This section explains how to modelize a step-index fiber with a core radius a=2 µm. The refractive index of the core is n_textcore=147 and that of the cladding is n_textcladding=145. ","category":"page"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"This fiber is bimodal at lambda=1 µm since the normalized frequency is V=frac2pi alambdasqrtn_textcore^2-n_textcladding^2=304. ","category":"page"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"To compute the two modes, we can use the fuction multi_step_fiber_modes that returns a vector of modes:","category":"page"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"#using Pkg; nothing # hide\n#Pkg.activate(\"../..\"); nothing # hide\nusing OpticalFibers\nusing OpticalFibers.ModeSolvers\nm0=multi_step_fiber_modes(1,0,2,[1.47,1.45],maxPosition=10);\nlength(m0)\nm01=m0[1]\nm1=multi_step_fiber_modes(1,1,2,[1.47,1.45],maxPosition=10);\nlength(m1)\nm11=m1[1]\nm2=multi_step_fiber_modes(1,2,2,[1.47,1.45],maxPosition=10);\nlength(m2)\nnothing; #hide","category":"page"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"Note that you can also use broadcasting to compute all modes with a single command:","category":"page"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"m=multi_step_fiber_modes.(1,[0,1],2,Ref([1.47,1.45]),maxPosition=10);\nm01=m[1][1];\nm11=m[2][1];\nnothing; #hide","category":"page"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"It is possible to plot the mode profile:","category":"page"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"using Plots\nplot(m01.r,m01.E,label=m01.Name)\nplot!(m11.r,m11.E,label=m11.Name)","category":"page"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"In order to visualize the modes in a 2D plot, one should use the conversion from ScalarMode1D to ScalarMode2D. Be careful when using Plots.jl: unlike this package, the second index of the matrix corresponds to the x-coordinate (as matlab but the opposite of Makie.jl).","category":"page"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"mm01=ScalarMode2D(m01);\nmm11s=ScalarMode2D(m11,sincos='s');\nmm11c=ScalarMode2D(m11,sincos='c');\ncontourf(mm11c.x,mm11c.y,mm11c.E',levels=100,linewidth=0)","category":"page"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"To observe the beating between the LP01 and the LP11, the modes must be first normalized. Then, the addition of the two fields at the distance z ∈ [0,214] µm is required. The beating length is frac2pivert Delta beta vert = fraclambdavert Delta n_eff vert= 107 µm","category":"page"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"normalize!(mm01)\nnormalize!(mm11c)\nnormalize!(mm11s)\nL=1/(m01.neff-m11.neff)","category":"page"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"anim=@animate for j=0:214\n    TotalField=ScalarField(mm01,z=j)+ScalarField(mm11c,z=j);\n    contourf(TotalField.x,TotalField.y,abs2.(TotalField.E'),levels=100,linewidth=0)\n    title!(\"z = $j µm\");\nend;\ngif(anim,\"anim_field.gif\",fps=15)","category":"page"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"It is also possible to compute the vector modes of the fiber: LP_01 mode becomes HE_11 mode and LP_11 mode becomes TE_01, TM_01 and HE_21 modes:","category":"page"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"mv0=multi_step_fiber_modes(1,0,2,[1.47,1.45],maxPosition=10,type=:Vector)","category":"page"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"mv1=multi_step_fiber_modes(1,1,2,[1.47,1.45],maxPosition=10,type=:Vector)","category":"page"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"mv2=multi_step_fiber_modes(1,2,2,[1.47,1.45],maxPosition=10,type=:Vector)","category":"page"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"Then, the Poynting Vector of the mode HE_21 can be computed and plotted:","category":"page"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"Px,Py,Pz=PoyntingVector(mv2[1]);\ncontourf(mv2[1].x,mv2[1].y,Pz',linewidth=0,levels=100,xlims=(-4,4),ylims=(-4,4))\nX,Y=meshgrid(mv2[1].x,mv2[1].y);\nquiver!(X[5:5:end,5:5:end],Y[5:5:end,5:5:end],quiver=(mv2[1].Ex[5:5:end,5:5:end]'/20,mv2[1].Ey[5:5:end,5:5:end]'/20),color=:cyan,arrow=arrow(:closed))","category":"page"},{"location":"ModeSolvers-Tutorial/#Gradient-index-fiber","page":"ModeSolvers-Tutorial","title":"Gradient index fiber","text":"","category":"section"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"In this tutorial, a germanium-doped parabolic gradient index fiber will be studied. The maximum Ge concentration is 20% and the core radius is 3.5 µm. The silica dispersion will be taken into account.","category":"page"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"First, a vector of Function is created to modelized the dispersive refractive index profile between 1 and 1.5 µm:","category":"page"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"using OpticalFibers\nusing OpticalFibers.PhysicalData\nusing Plots\nlambda=1:0.01:1.5;\nf=[r->n_Ge_Doped_Silica(l*1e-6,0)+(n_Ge_Doped_Silica(l*1e-6,0.2)-n_Ge_Doped_Silica(l*1e-6,0))*(r<=3.5)*(1-r^2/3.5^2) for l in lambda];\nr=0:0.1:5;\nplot(r,f[1].(r),label=\"λ = 1 µm\",xlabel=\"r (µm)\",ylabel=\"Refractive index\");\nplot!(r,f[end].(r),label=\"λ = 1.5 µm\")","category":"page"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"The modal content is then computed:","category":"page"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"using OpticalFibers.ModeSolvers\nm=FD.(lambda,[0,1,2]',2,f,1000,10);\n#mode LP01 always exists\nneff01=[m[j,1][1].neff for j in 1:length(lambda)];\nN02=sum((length.(m[:,1])).>=2);\nneff02=[m[j,1][2].neff for j in 1:N02];\nN11=sum((length.(m[:,2])).>=1);\nneff11=[m[j,2][1].neff for j in 1:N11];\nN21=sum((length.(m[:,3])).>=1);\nneff21=[m[j,3][1].neff for j in 1:N21];\nplot(lambda,n_Ge_Doped_Silica.(lambda*1E-6,0),label=\"Silica\",xlabel=\"λ (µm)\",ylabel=\"Effective index\",color=:black);\nplot!(lambda,n_Ge_Doped_Silica.(lambda*1E-6,0.2),label=\"Ge-doped Silica (20%)\",color=:black,line=:dash);\nplot!([lambda,lambda[1:N11],lambda[1:N02],lambda[1:N21]],[neff01,neff11,neff02,neff21],label=[\"LP01\" \"LP11\" \"LP02\" \"LP21\"])","category":"page"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"The second-order dispersion is defined by beta_2=fracpartial^2 betapartial omega^2.","category":"page"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"beta01=neff01*2*pi./lambda*1E6;\nomega=2*pi*OpticalFibers.PhysicalData.c./lambda*1E6;\nomega2,beta2=derivative((omega,beta01),2);\nlambda2=2*pi*OpticalFibers.PhysicalData.c./omega2*1E6;\nplot(lambda2,beta2*1E26,xlabel=\"λ (µm)\",ylabel=\"β₂ (10⁻²⁶ s²/m)\")","category":"page"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"To compute the effective area and the non-linear coefficient, the fields must be calculated:","category":"page"},{"location":"ModeSolvers-Tutorial/","page":"ModeSolvers-Tutorial","title":"ModeSolvers-Tutorial","text":"m=FD.(lambda,0,1,f,1000,10,field=true);\nm=[m[i][1] for i in 1:length(lambda)];\nA=Aeff.(m);\ngamma=nonLinearCoefficient.(m,2.53E-20)*1E21;\nplot(lambda,A,label=\"Aeff\",ylabel=\"Effective area (µm²)\",xlabel=\"λ (µm)\",color=:blue,leg=:topright);\nplot!(twinx(),lambda,gamma,label=\"γ\",ylabel=\"Non-linear coefficient ((W.km)⁻¹)\",color=:red,leg=:topleft)","category":"page"},{"location":"#OpticalFibers.jl","page":"Home","title":"OpticalFibers.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OpticalFibers.jl is a package that allows to compute modes of optical fibers. Different methods are implemented to find scalar or vector modes:","category":"page"},{"location":"","page":"Home","title":"Home","text":"A semi-analytical solver (based on Bessel functions) for multi-step index fibers.\nFinite difference method for graded-index isotropic fibers.\nFinite element method (using Gridap.jl) for any kind of isotropic or anisotropic fiber (useful to find leaky modes using a PML for example)","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OpticalFibers.jl requires at least julia 1.9 and can be installed with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"OpticalFibers\")","category":"page"},{"location":"#Quickstart","page":"Home","title":"Quickstart","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Computation of the scalar fundamental mode (l=0) of a step index fiber with a core-radius of 2 µm, a refractive index of 1.47 for core and 1.45 for cladding at a wavelength of 1 µm:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using OpticalFibers\njulia> using OpticalFibers.ModeSolvers\njulia> ms=multi_step_fiber_modes(1,0,2,[1.47,1.45])\n1-element Vector{ScalarMode1D}:\n [\"LP 0,1\",1.463179347605715,1.0,0]","category":"page"},{"location":"","page":"Home","title":"Home","text":"Computation of the fundamental vector mode (l=1) of the same fiber:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> mv=multi_step_fiber_modes(1,1,2,[1.47,1.45],type=:Vector)\n1-element Vector{VectorMode}:\n [\"HE 1,1\",1.4631371608572663,1.0]","category":"page"},{"location":"","page":"Home","title":"Home","text":"Computation of the scalar modes of a parabolic-index fiber with a core-radius of 4 µm, a refractive index of 1.48 for core center and 1.45 for cladding at a wavelength of 1 µm by using the finite difference method with 1000 nodes between r=0 and r=20 µm:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using OpticalFibers\njulia> using OpticalFibers.ModeSolvers\njulia> m=FD.(1,[0,1,2],5,r->1.45+0.03*(1-r^2/16)*(r<=4),1000,20,field=true)\n3-element Vector{Vector{ScalarMode1D}}:\n [[\"LP 0,1\",1.471980845215266,1.0,0,[0.0,20.0],[1.1164104145818255e-15,0.12423741722742176]], [\"LP 0,2\",1.456151117128024,1.0,0,[0.0,20.0],[-0.06350256918319086,0.14163056081827127]]]\n [[\"LP 1,1\",1.4639612833431581,1.0,1,[0.0,20.0],[-0.10628423740430118,0.0]]]\n [[\"LP 2,1\",1.4560227630144946,1.0,2,[0.0,20.0],[-0.10409704787976527,0.0]]]\n\njulia> m[1][1]\nName = LP 0,1\nneff = 1.471980845215266\nlambda = 1.0\nnu = 0\nr ∈ [0.0,20.0]\nE ∈ [-0.12423741722742185,-1.114629187729248e-15]\n\njulia> using Plots\njulia> plot(m[1][1].r,abs2(m[1][1].E))","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Fundamental mode example)","category":"page"},{"location":"#Credits","page":"Home","title":"Credits","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OpticalFibers is maintained by Olivier Vanvincq (university of Lille, PhLAM laboratory).","category":"page"}]
}
